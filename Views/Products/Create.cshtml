@model Mercadona4.Models.Product

@{
    ViewData["Title"] = "Créer un produit - tableau de bord - Mercadona";
}

<h2>Créer un produit</h2>

<a class="returnbutton" asp-action="Dashboard">Retour</a>

<form id="product-form" asp-action="Create" enctype="multipart/form-data">
    <input id="label-input" asp-for="Label" placeholder="Nom du produit" />
    <div id="label-error" class="text-danger"></div>

    <input id="description-input" asp-for="Description" placeholder="Description du produit" />
    <div id="description-error" class="text-danger"></div>

    <input id="price-input" asp-for="Price" data-val="false" placeholder="Prix du produit" />
    <div id="price-error" class="text-danger"></div>

    <input id="image-input" type="file" name="ImageUpload" />
    <div id="image-error" class="text-danger"></div>

    <select id="category-input" asp-for="Category">
        <option disabled selected>Sélectionnez une catégorie</option>
        <option value="Fruits">Fruits</option>
        <option value="Légumes">Légumes</option>
        <option value="Produits laitiers">Produits laitiers</option>
        <option value="Surgelés">Surgelés</option>
        <option value="Multimédia">Multimédia</option>
    </select>
    <div id="category-error" class="text-danger"></div>

    <select asp-for="PromotionId">
        <option value="">Sans promotion</option>
        @if (ViewBag.PromotionId != null) // Si la ViewBag contient une valeur pour "PromotionId"...
        {
            // Tente de convertir la valeur de "PromotionId" en SelectList
            var promotionList = ViewBag.PromotionId as SelectList;

            // Si la conversion a réussi et que la liste n'est pas vide...
            if (promotionList != null && promotionList.Any())
            {
                // Parcourir chaque élément de la liste...
                foreach (var item in promotionList)
                {
                    // ...et générer une option de sélection pour chaque promotion
                    <option value="@item.Value">@item.Text</option>
                }
            }
            else
            {
                // Si aucune promotion n'a été trouvée, générer une option de sélection désactivée avec un message approprié
                <option disabled>Aucune promotion trouvée. Veuillez en créer une pour qu'elle apparaisse ici.</option>
            }
        }
    </select>

    <input id="submit-button" type="submit" value="Créer" />
</form>

<script>
    // Ajout d'un gestionnaire d'événement 'submit' pour le formulaire d'identification de produit
    document.getElementById('product-form').addEventListener('submit', function (event) {
        // Initialiser un indicateur de validité du formulaire à true
        var isValid = true;

        // Obtention des références pour l'entrée et l'erreur du label
        var labelInput = document.getElementById('label-input');
        var labelError = document.getElementById('label-error');
        // Validation du label (entre 3 et 35 caractères)
        if (labelInput.value.length > 35 || labelInput.value.length < 3) {
            isValid = false;
            if (labelInput.value.length < 3) {
                labelError.textContent = 'Le nom du produit doit comporter au moins 3 caractères.';
            } else {
                labelError.textContent = 'Le nom du produit ne doit pas dépasser 35 caractères.';
            }
        } else {
            labelError.textContent = '';
        }

        // Idem pour la description (ne doit pas être vide)
        var descriptionInput = document.getElementById('description-input');
        var descriptionError = document.getElementById('description-error');
        if (descriptionInput.value.length === 0) {
            isValid = false;
            descriptionError.textContent = 'La description est obligatoire.';
        } else {
            descriptionError.textContent = '';
        }

        // Idem pour le prix (doit être un nombre compris entre 0,01 et 999,99)
        var priceInput = document.getElementById('price-input');
        var priceError = document.getElementById('price-error');
        var priceValue = priceInput.value.replace('.', ',');  // Remplacer le point par une virgule
        var price = parseFloat(priceValue.replace(',', '.')); // Remplacer la virgule par un point pour la validation
        if (isNaN(price) || price < 0.01 || price > 999.99) {
            isValid = false;
            priceError.textContent = 'Le prix doit être entre 0,01€ et 999,99€.';
        } else {
            priceError.textContent = '';
            priceInput.value = priceValue; // Rétablir la valeur d'origine (avec une virgule) après la validation
        }

        // Idem pour l'image (doit être présente, <150Mo et de type JPEG ou PNG)
        var imageInput = document.getElementById('image-input');
        var imageError = document.getElementById('image-error');
        var file = imageInput.files[0];
        if (!file) {
            isValid = false;
            imageError.textContent = 'L\'image est obligatoire.';
        } else {
            var fileSize = file.size / 1024 / 1024; // poids en MB
            var validFileTypes = ['image/jpeg', 'image/png'];
            if (fileSize > 150) {
                isValid = false;
                imageError.textContent = 'L\'image ne doit pas dépasser 150Mo.';
            } else if (!validFileTypes.includes(file.type)) {
                isValid = false;
                imageError.textContent = 'Le format de l\'image doit être .jpg, .jpeg ou .png.';
            } else {
                imageError.textContent = '';
            }
        }

        // Idem pour la catégorie (doit être dans la liste prédéfinie de catégories valides)
        var categoryInput = document.getElementById('category-input');
        var categoryError = document.getElementById('category-error');
        var validCategories = ['Fruits', 'Légumes', 'Produits laitiers', 'Surgelés', 'Multimédia'];
        if (!validCategories.includes(categoryInput.value)) {
            isValid = false;
            categoryError.textContent = 'Veuillez sélectionner une catégorie valide.';
        } else {
            categoryError.textContent = '';
        }

        // Si le formulaire n'est pas valide, empêcher son envoi
        if (!isValid) {
            event.preventDefault();
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
